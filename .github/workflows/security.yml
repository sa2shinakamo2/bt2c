name: Security Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight

env:
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      # Python security checks
      - name: Install Python security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety pycodestyle pylint
          
      - name: Run Bandit security scan
        run: bandit -r . -c pyproject.toml -f json -o bandit-results.json || true

      - name: Check Python dependencies
        run: safety check

      # Secret scanning - modified to use a fixed depth
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: HEAD~1
          head: HEAD
          extra_args: --debug --only-verified

      # SAST scan
      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: python
          queries: security-extended,security-and-quality

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      # Dependency scanning
      - name: Run Snyk security scan
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ env.SNYK_TOKEN }}
        with:
          command: monitor

      # Upload scan results
      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: bandit-results.json

  blockchain-specific-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      # Custom blockchain security checks
      - name: Install blockchain security tools
        run: |
          pip install slither-analyzer
          
      - name: Run smart contract security scan
        run: |
          # Scan for common blockchain vulnerabilities
          slither . --detect reentrancy,uninitialized-state,uninitialized-storage || true

  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v3
      
      - name: 'Dependency Review'
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: high
          base-ref: ${{ github.event.pull_request.base.ref }}
          head-ref: ${{ github.event.pull_request.head.ref }}
