version: '3.8'

services:
  load_balancer:
    image: nginx:alpine
    ports:
      - "443:443"
      - "26656:26656"
    volumes:
      - ./config/nginx:/etc/nginx
      - ./certs:/etc/nginx/certs
    depends_on:
      - validator1
      - validator2
    networks:
      - bt2c_net

  validator1:
    build:
      context: .
      dockerfile: Dockerfile.production
    environment:
      - NODE_ROLE=validator
      - NODE_ID=1
      - CONFIG_FILE=/app/config/production.json
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - validator1_data:/root/.bt2c
      - ./logs:/var/log/bt2c
      - ./backups:/var/backups/bt2c
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
    networks:
      - bt2c_net

  validator2:
    build:
      context: .
      dockerfile: Dockerfile.production
    environment:
      - NODE_ROLE=validator
      - NODE_ID=2
      - CONFIG_FILE=/app/config/production.json
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - validator2_data:/root/.bt2c
      - ./logs:/var/log/bt2c
      - ./backups:/var/backups/bt2c
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
    networks:
      - bt2c_net

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=bt2c
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=bt2c
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bt2c"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    networks:
      - bt2c_net

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    networks:
      - bt2c_net

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - bt2c_net

  grafana:
    image: grafana/grafana:latest
    volumes:
      - ./monitoring/grafana:/etc/grafana
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    depends_on:
      - prometheus
    networks:
      - bt2c_net

  backup:
    image: postgres:15-alpine
    volumes:
      - ./backups:/backups
      - ./scripts/backup:/scripts
    environment:
      - POSTGRES_USER=bt2c
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=bt2c
      - BACKUP_RETENTION_DAYS=30
    entrypoint: ["/scripts/backup.sh"]
    depends_on:
      - postgres
    networks:
      - bt2c_net

volumes:
  validator1_data:
  validator2_data:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  bt2c_net:
    driver: bridge
