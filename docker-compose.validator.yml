version: '3.8'

services:
  validator1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: bt2c-validator1
    volumes:
      - ./data:/app/data
      - ./certs:/app/certs
      - ./mainnet:/app/mainnet
      - ./config/validator.json:/app/config/validator.json
    environment:
      - NETWORK_TYPE=mainnet
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=bt2c
      - DB_USER=bt2c
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_URL=redis://redis:6379/0
      - API_HOST=0.0.0.0
      - API_PORT=8001
    ports:
      - "8001:8001"
      - "26656:26656"
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "10"
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G

  validator2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: bt2c-validator2
    volumes:
      - ./data:/app/data
      - ./certs:/app/certs
      - ./mainnet:/app/mainnet
      - ./config/validator2.json:/app/config/validator.json
    environment:
      - NETWORK_TYPE=mainnet
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=bt2c
      - DB_USER=bt2c
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_URL=redis://redis:6379/0
      - API_HOST=0.0.0.0
      - API_PORT=8002
    ports:
      - "8002:8002"
      - "26657:26657"
    depends_on:
      - postgres
      - redis
      - validator1
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "10"
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G

  postgres:
    image: postgres:15-alpine
    container_name: bt2c-postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=bt2c
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=bt2c
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bt2c"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: bt2c-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    container_name: bt2c-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: bt2c-grafana
    volumes:
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./monitoring/dashboards/provider.yml:/etc/grafana/provisioning/dashboards/provider.yml
      - ./monitoring/dashboards:/etc/grafana/provisioning/dashboards
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
